{"data":{"site":{"siteMetadata":{"title":"devLog","author":"Junho Baik"}},"markdownRemark":{"id":"/Users/junhobaik/Development/junhobaik.github.io/_posts/2018-01-15-jekyll-apply-theme.md absPath of file >>> MarkdownRemark","html":"<p>jekyll 블로그를 시작하기 위한 준비를 저번 포스트에서 끝냈다.<br>\n이제 테마를 적용하고자 여러 테마를 찾던중 정말 괜찮은 테마를 발견했고 그것을 적용하는 과정을 포스팅하려고 한다.</p>\n<p>테마의 이름은 'Minimal Mistakes'로 github star와 fork를 보아 인기있는 테마인듯 싶다.<br>\n심플한 디자인과 가독성이 맘에 들었고 무엇보다 문서가 너무나 잘 정리되있다는 점에 있어서 선택하게 되었다.</p>\n<h3>Minimal Mistakes</h3>\n<ul>\n<li><a href=\"https://mmistakes.github.io/minimal-mistakes\">Official &#x26; Demo Page</a></li>\n<li><a href=\"https://github.com/mmistakes/minimal-mistakes\">Github</a></li>\n</ul>\n<h2>테마 적용하기</h2>\n<p>우선 기존 포스트에서 jekyll 설치를 다뤘는데, 그로인해 기본 테마로 적용이 되어있는 상태이다.<br>\n여기서 테마를 적용하는 방법으로는 여러가지가 있다. </p>\n<p>가장 쉬운방법은 테마의 github에서 fork를 하고 리포지토리 이름을 <code>username.github.io</code>로 바꾸는 방법이다.</p>\n<p>만약 기존에 해둔 리포지토리를 파괴하지 않는 선에서 테마를 적용하고 싶다면 테마를 다운받아 기존 리포지토리 폴더에 덮어쓰기 하는 방법도 있다.</p>\n<p>여기서는 깔끔하게 비어있는 리포지토리에서 테마를 적용하는 방법을 기술하겠다.</p>\n<p>만약 지금 보고있는 블로그가 맘에 들고 아래 방법보다 더 쉽게 테마 적용하고 싶다면 지금 이 블로그의 GitHub 리포지토리를 Fork해 사용할 수 있도록 방법을 만들어놨으니 포스팅을 참고하면 된다.<br>\n<a href=\"https://junhobaik.github.io/jekyll-apply-theme-simple\">Jekyll 블로그 테마 ‘쉽게’ 적용하기 (minimal-mistakes)</a>\n{: .notice--warning}</p>\n<h3>테마 다운받아 적용하기</h3>\n<p>테마를 다운받으려면 보통 리포지토리를 clone하거나 zip파일로 다운받는 방법이 보통이다.<br>\n아니면 jekyll theme 페이지에서 다운받는 방법이 있다.  </p>\n<p>minimal mistakes 테마를 다운받으려 github 리포지토리를 zip으로 다운받아 시도하였다.<br>\n허나 사이드바 표시등 자잘한 문제가 보여 정식 릴리즈된 파일을 찾아 다운받았다.</p>\n<p><a href=\"https://github.com/mmistakes/minimal-mistakes/releases\">https://github.com/mmistakes/minimal-mistakes/releases</a></p>\n<p>다운받은 폴더의 내용을 프로젝트 폴더(username.github.io)에 옮긴다.<br>\n이 과정에서 아래를 참조해 불필요한 파일을 삭제하도록 한다.</p>\n<h3>불필요한 파일 삭제</h3>\n<p>불필요한 파일은 아래와 같다.  </p>\n<ul>\n<li>.editorconfig</li>\n<li>.gitattributes</li>\n<li>.github</li>\n<li>/docs</li>\n<li>/test</li>\n<li>CHANGELOG.md</li>\n<li>minimal-mistakes-jekyll.gemspec</li>\n<li>README.md</li>\n<li>screenshot-layouts.png</li>\n<li>screenshot.png</li>\n</ul>\n<h3>_posts, _draft 폴더 생성</h3>\n<p>그리고 _posts와 _draft 폴더가 없다면 생성하도록 한다. (최상위 경로)</p>\n<ul>\n<li>_drafts : 포스트 초안이 담기는 곳이다. 배포되지 않고 테스트 환경에서 보기가 가능하다.</li>\n<li>_posts : 배포될 포스트들이 담기는 곳.</li>\n</ul>\n<h3>.gitignore 생성</h3>\n<p>다음으로 최상위 경로에 .gitignore 파일이 없다면 생성하고 있다면 아래 내용을 보충하자.<br>\n<a href=\"https://gist.github.com/bradonomics/cf5984b6799da7fdfafd\">Jeklly gitignore list</a></p>\n<h3>Gemfile 수정</h3>\n<p>Gemfile을 아래 내용으로 수정한다.</p>\n<pre><code class=\"language-yml\">source \"https://rubygems.org\"\n\ngem \"jekyll\", \"~> 3.5\"\ngem \"minimal-mistakes-jekyll\"\n</code></pre>\n<p>아래 명령어를 수행한다.</p>\n<pre><code>$ bundle\n</code></pre>\n<h3>테스트, 배포</h3>\n<p>이제 기본적으로 테마 적용이 완료되었다. 다음으로 개인에 맞춰 커스터마이징 하면 된다.<br>\n그 전에 한번 테스트와 배포를 해보자.</p>\n<pre><code>jekyll serve\n</code></pre>\n<p>위 명령어로 <code>localhost:4000</code>에서 로컬로 띄워볼 수 있다.</p>\n<p>이 명령어 뒤에 붙는 옵션으로 유용한 것은</p>\n<ul>\n<li><code>--draft</code> 초안을 같이 표시한다.</li>\n<li><code>--livereload</code> 수정마다 새로고침된다.</li>\n</ul>\n<p>중요한 것은 <code>_config.yml</code> 파일을 수정하는 것은 반영되지 않아 다시 명령어를 수행해야 반영 된다.</p>\n<p>다음으로 git comit, push 를 통해 자신의 github page에 올린다.</p>\n<p>예)</p>\n<pre><code>$ git add .\n$ git commit -m 'Apply theme, minimal mistakes'\n$ git push\n</code></pre>\n<p><code>username.github.io</code>에 접속해 제대로 반영 되었는지 확인한다.</p>\n<h2>테마 설정하기</h2>\n<p>이제 개인에 맞춰 커스터마이징 할 차례이다.<br>\n구체적인 것은 생략하고 기본적으로 수정이 필요한 내용들만 다루겠다.  </p>\n<p><code>_config.yml</code>을 수정하자.</p>\n<p>설정을 수정할때는 <code>jekyll serve</code>가 실시간 반영되지 않으니 다시 명령어를 수행해야하는 점을 유의하자.</p>\n<h3>테마 스킨</h3>\n<pre><code class=\"language-yml\">minimal_mistakes_skin : \"defalut\"\n</code></pre>\n<p>테마의 전체적인 색상 스킨을 정할 수 있다.<br>\n스킨은 아래 링크에서 확인 할 수 있다.<br>\n<a href=\"https://mmistakes.github.io/minimal-mistakes/docs/configuration/#skin\">Skin list</a></p>\n<h3>Site Settings</h3>\n<pre><code class=\"language-yml\">locale                   : \"ko\" # 타깃 국가 설정\ntitle                    : \"블로그 제목\" # 블로그 좌측상단의 제목\nname                     : \"블로그 이름\"\ndescription              : \"블로그 설명\"\nurl                      : \"https://username.github.io\" # 블로그 주소\nrepository               : \"username/username.github.io\" # 블로그 github 리포지토리\nsearch                   : true # 사이트 우측 상단 검색 활성화\nsearch_full_content      : # 제목이 아닌 내용까지도 검색할 것인지에 대한 설정 기본 false\n</code></pre>\n<h3>Site Author</h3>\n<p>사이트 운영자에 대한 정보를 적는다.<br>\n사이드바에 표시되는 사항들이다.</p>\n<pre><code class=\"language-yml\">author:\n  name             : \"이름\"\n  avatar           : \"/assets/images/bio-photo.jpg\" # 프로필 사진\n  bio              : \"이름 아래 나타날 자신의 설명\"\n  location         : \"Seoul,Korea\"\n  email            : \"a@b.c\"\n  uri              : # 웹사이트, 보통 지금 블로그 말고 링크해두고 싶은 사이트를 적는다.\n  # 이 아래 쇼셜 리스트에 해당되는 것에 아이디를 적는다\n  github : \"username\" # 주소 전체를 적는 것이 아닌 자신의 정보만 적는다.\n</code></pre>\n<h3>Defaults</h3>\n<pre><code class=\"language-yml\"># Defaults\ndefaults:\n  # _posts\n  - scope:\n      path: \"\"\n      type: posts\n    values:\n      layout: single\n      author_profile: true\n      read_time: false # 해당 포스트를 읽은 시간이 표시되는데 기본값은 true이다.\n      comments: # true\n      share: true # 포스트 공유 기능을 활성화 할 것인지 정한다. 기본값은 true이다.\n      related: true\n</code></pre>\n<h3>댓글 설정</h3>\n<p>disqus를 적용해 보기 위해 우선 disqus에서 사이트를 하나 추가하고 <code>short-name</code>을 알아둔다</p>\n<p>아래 코드를 보고 <code>_config.yml</code>의 설정을 수정한다</p>\n<pre><code class=\"language-yml\">comments:\n  provider               : \"disqus\"\n  disqus:\n    shortname            : dev-hundred-blog # Short-name\n\ndefaults:\n  # _posts\n  - scope:\n      path: \"\"\n      type: posts\n    values:\n      layout: single\n      author_profile: true\n      read_time: false\n      comments: true # 댓글 활성화\n      share: true\n      related: true\n</code></pre>\n<h2>Navigation 설정</h2>\n<p>헤더 부분에 표시될 네비게이션 메뉴 설정을 하겠다.<br>\n주로 많이 사용하는 메뉴들로 기본 설정을 해보겠다.  </p>\n<ul>\n<li>Archive</li>\n<li>Tag</li>\n<li>Category</li>\n</ul>\n<p>기본적으로 <code>_data/navigation.yml</code>에서 네비게이션 설정을 할 수 있다.<br>\n예로 Archive라는 메뉴 하나가 네비게이션에 있다고 하면 아래와 같다.</p>\n<pre><code class=\"language-yml\">main:\n  - title: \"Archive\"\n    url: /year-archive/\n</code></pre>\n<p>url은 <code>_pages</code>폴더안에 있는 페이지의 permalink와 연결된다.</p>\n<p><code>_pages/year-archive.html</code></p>\n<pre><code class=\"language-yml\">---\nlayout: archive\npermalink: /year-archive/\ntitle: \"Posts by Year\"\nauthor_profile: true\n---\n# ... Code Here ...\n</code></pre>\n<p>이제 실제로 적용을 해보도록 하자.\n기본적인 양식은 <a href=\"https://github.com/mmistakes/minimal-mistakes/tree/master/docs\">minimal mistakes의 github의 예제</a> 양식을 가져왔다.</p>\n<p><code>_data/navigation.yml</code></p>\n<pre><code class=\"language-yml\">main:\n  - title: \"Archive\"\n    url: /year-archive/\n  - title: \"tag\"\n    url: /tags/\n  - title: \"Category\"\n    url: /categories/\n</code></pre>\n<p><code>_pages/year-archive.html</code>\n{% raw %}</p>\n<pre><code class=\"language-liquid\">---\nlayout: archive\npermalink: /year-archive/\ntitle: \"Posts by Year\"\nauthor_profile: true\n---\n{% assign postsByYear = site.posts | group_by_exp:\"post\", \"post.date | date: '%Y'\"  %}\n{% for year in postsByYear %}\n  &#x3C;h2 id=\"{{ year.name | slugify }}\" class=\"archive__subtitle\">{{ year.name }}&#x3C;/h2>\n  {% for post in year.items %}\n    {% include archive-single.html %}\n  {% endfor %}\n{% endfor %}\n</code></pre>\n<p>{% endraw %}</p>\n<p><code>_pages/tag-archive.html</code>  </p>\n<p>태그 부분은 기본 양식에서 살짝 수정했다.\n{% raw %}</p>\n<pre><code class=\"language-liquid\">---\nlayout: archive\npermalink: /tags/\ntitle: \"Posts by Tag\"\nauthor_profile: true\n---\n{% include group-by-array collection=site.posts field=\"tags\" %}\n&#x3C;ul>\n  {% for tag in site.tags %}\n    &#x3C;span>\n      &#x3C;a href=\"#{{ tag | first }}\">\n        {{ tag | first }}\n      &#x3C;/a> &#x26;nbsp;&#x26;nbsp;&#x26;nbsp;\n    &#x3C;/span>\n  {% endfor %}\n&#x3C;/ul>\n&#x3C;br/>\n&#x3C;br/>\n{% for tag in group_names %}\n  {% assign posts = group_items[forloop.index0] %}\n  &#x3C;h2 id=\"{{ tag | slugify }}\" class=\"archive__subtitle\">{{ tag }}&#x3C;/h2>\n  {% for post in posts %}\n    {% include archive-single.html %}\n  {% endfor %}\n{% endfor %}\n</code></pre>\n<p>{% endraw %}</p>\n<p><code>_pages/category-archive.html</code>\n{% raw %}</p>\n<pre><code class=\"language-liquid\">---\nlayout: archive\npermalink: /categories/\ntitle: \"Posts by Category\"\nauthor_profile: true\n---\n{% include group-by-array collection=site.posts field=\"categories\" %}\n{% for category in group_names %}\n  {% assign posts = group_items[forloop.index0] %}\n  &#x3C;h2 id=\"{{ category | slugify }}\" class=\"archive__subtitle\">{{ category }}&#x3C;/h2>\n  {% for post in posts %}\n    {% include archive-single.html %}\n  {% endfor %}\n{% endfor %}\n</code></pre>\n<p>{% endraw %}</p>\n<hr>\n<p>이제 어느정도 블로그를 운영할 수 있게 된 것 같다.<br>\n허나 아직 세부적으로 코드 수정을 통해 커스터마이징 할 것들이 보인다.  </p>\n<p>이번 포스팅은 여기까지 하고 차후에 SEO 관련 포스팅을 할 생각이다.</p>\n<hr>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://mmistakes.github.io/minimal-mistakes/docs/quick-start-guide/\">Minimal Mistakes Quick-Start Guide</a></li>\n</ul>","frontmatter":{"title":"Jekyll 블로그 테마 적용하기 (minimal-mistakes)","date":"Invalid date"}}},"pageContext":{"slug":"/jekyll-apply-theme/","previous":{"fields":{"slug":"/start-jekyll-blog/"},"frontmatter":{"title":"Jekyll 블로그 시작하기 (MacOS, GitHub Page)","tags":["jekyll","blog","ruby"]}},"next":{"fields":{"slug":"/vsc-plugin-list/"},"frontmatter":{"title":"사용중인 VSCode(Visual Studio Code) 확장 플러그인 목록","tags":["VSCode"]}}}}