{"data":{"site":{"siteMetadata":{"title":"devLog","author":"Junho Baik"}},"markdownRemark":{"id":"/Users/junhobaik/Development/junhobaik.github.io/_posts/2017/2017-06-06-js-react-router-v4.md absPath of file >>> MarkdownRemark","html":"<p>SPA(Single page application) 에서는 새로운 페이지 전체를 렌더링하지 않고, 부분적인 UI를 새로 렌더링한다.\n따라서 브라우저는 이 정보에 대한 이력을 남기지 않는다.\n결국 ''뒤로가기/앞으로가기''를 사용할 수 없다는 이야기이며,\n이는 사용자에게 당연시 되는 기능이므로 안된다면 많은 불편을 야기할 수 있다.\n그를 해결하기 위한 방법으로 React-router 라이브러리를 사용하게 된다.</p>\n<h2>install</h2>\n<p><code>npm install --save-dev react-router-dom</code></p>\n<p>기존 v3 에서는 react-router 만 설치해서 사용하면 됐었다.\nv4에서는 브라우저와 react에서 사용되는 라우터가 분리되어 사용하도록 되어있다.\nReact-router-dom을 설치하면 react-router도 같이 설치된다.</p>\n<h2>Use</h2>\n<h3>Basic</h3>\n<p>상단의 헤더, 그 아래 컨텐츠가 나타나는 기본 구조.</p>\n<ul>\n<li>src/App.js</li>\n</ul>\n<pre><code class=\"language-react\">//..\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nimport Main from './routes/Main';\nimport User from './routes/User';\nimport Header from './components/Header';\nimport Posts from './routes/Posts';\n\nclass App extends Component {\n  render() {\n    return (\n      &#x3C;Router>\n        &#x3C;div>\n          &#x3C;Header/>\n          &#x3C;Route exact path=\"/\" component={Main}/>\n          &#x3C;Route path=\"/user\" component={User}/>\n          &#x3C;Route path=\"/posts\" component={Posts}\n          {/* exact 키워드가 없으면 /user 경로에서 /도 있는 것으로 인식, \n          Main과 User가 동시 출력 된다.*/}\n        &#x3C;/div>\n      &#x3C;/Router>\n    );\n  }\n}\n</code></pre>\n<ul>\n<li>src/components/Header.js</li>\n</ul>\n<pre><code class=\"language-react\">//..\n  return (\n    &#x3C;div>\n        &#x3C;Link to=\"/\">Home&#x3C;/Link>\n        &#x3C;Link to=\"/User\">User&#x3C;/Link>\n    &#x3C;/div>\n  );\n</code></pre>\n<hr>\n<h3>URL Parameter</h3>\n<ul>\n<li>src/App.js</li>\n</ul>\n<pre><code class=\"language-react\">//..\n&#x3C;Route path=\"/user/:username\" component={User}/>\n//..\n</code></pre>\n<ul>\n<li>src/routes/User.js</li>\n</ul>\n<pre><code class=\"language-react\">//..\nconst User = ({match}) => {\n  return (\n    &#x3C;div> UserName is {match.params.username} &#x3C;/div>\n  );\n}\n</code></pre>\n<p><code>…/user/baik</code> URL로 접속하면 UserName is baik 라는 것을 확인 할 수 있다.</p>\n<hr>\n<h3>Route in Component</h3>\n<ul>\n<li>src/routes/Posts.js</li>\n</ul>\n<pre><code class=\"language-react\">//..\n\nimport { Route, Link } from 'react-router-dom';\n\nconst Post = ({match}) => {\n  return (\n    &#x3C;div>\n        &#x3C;h2>{match.params.title}&#x3C;/h2>\n    &#x3C;/div>\n  );\n}\n\nconst Posts = () => {\n  return (\n    &#x3C;div>\n        &#x3C;h1>Post&#x3C;/h1>\n        &#x3C;Link to=\"/posts/react\">React&#x3C;/Link>\n        &#x3C;Link to=\"/posts/redux\">Redux&#x3C;/Link>\n        &#x3C;Route\n            path=\"/posts/:title\"\n            component={Post}\n          />\n    &#x3C;/div>\n  );\n}\n\nexports default Posts;\n</code></pre>\n<hr>\n<h3>NavLink</h3>\n<ul>\n<li>src/components/Header.css</li>\n</ul>\n<pre><code class=\"language-css\">.item.active {\n  \n}\n</code></pre>\n<ul>\n<li>src/components/Header.js</li>\n</ul>\n<pre><code class=\"language-react\">// &#x3C;Link to ...>&#x3C;/Link> => &#x3C;NavLink to...>&#x3C;/NavLink>\n\n&#x3C;NavLink exact to=\"/\" className=\"item\" activeClassName=\"active\">Home&#x3C;/NavLink>\n\n{/* exact를 줘야 효과가 지난후에도 남아있지 않고 정확히 일치할때만 효과 적용 가능*/}\n</code></pre>\n<hr>\n<h3>Redirect</h3>\n<pre><code class=\"language-react\">import { Redirect } from 'react-router-dom';\n\nconst isLogin = false\n\n//..\nreturn (\n  &#x3C;div> \n    {!isLogin &#x26;&#x26; &#x3C;Redirect to=\"/login\"/>}\n    MyPage\n  &#x3C;/div>\n);\n</code></pre>\n<pre><code class=\"language-react\">const Main = ({history}) => {\n  return (\n    &#x3C;div>\n        &#x3C;button onClick={()=>{history.push('/posts')}}>포스트로 이동&#x3C;/button>\n    &#x3C;/div>\n  );\n}\n</code></pre>\n<hr>\n<h3>Query Parameter</h3>\n<pre><code class=\"language-react\">//..\nconst Main = ({location}) => {\n  return (\n      &#x3C;div>\n          {new URLSearchParams(location.search).get('keyword')} 검색\n      &#x3C;/div>\n  );\n}\n</code></pre>\n<hr>\n<h3>Make NotFound Page</h3>\n<ul>\n<li>src/App.js</li>\n</ul>\n<pre><code class=\"language-react\">//..\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\n//..\nimport notFound from './routes/notFound';\n\nclass App extends Component {\n  render() {\n    return (\n      &#x3C;Router>\n        &#x3C;div>\n          &#x3C;Header/>\n            &#x3C;div>\n              &#x3C;Switch>\n                &#x3C;Route exact path=\"/\" component={Main}/>\n                &#x3C;Route path=\"/user\" component={User}/>\n                &#x3C;Route path=\"/posts\" component={Posts}/>\n                &#x3C;Route component={notFound}/>\n              &#x3C;/Switch>\n            &#x3C;/div>\n        &#x3C;/div>\n      &#x3C;/Router>\n    );\n  }\n}\n</code></pre>\n<p>Switch를 추가한다.</p>\n<p>기존 Switch가 없고, exact 조차 없을때는 Route 전체를 하나하나 비교해서 출력하나</p>\n<p>Switch가 있으면 일치하는 것이 있으면 비교를 그만둔다, 끝까지 일치하는 것이 없으면 notFound 컴포넌트를 보여주게 된다.</p>\n<hr>\n<h2>Reference</h2>\n<ul>\n<li>CodeSquad</li>\n<li><a href=\"https://velopert.com/3275\">https://velopert.com/3275</a></li>\n</ul>","frontmatter":{"title":"리액트 라우터 V4 사용하기 (React-Router v4)","date":"June 06, 2017"}}},"pageContext":{"slug":"/js-react-router-v4/","previous":{"fields":{"slug":"/js-this/"},"frontmatter":{"title":"자바스크립트 this","tags":["javascript"]}},"next":{"fields":{"slug":"/js-scope/"},"frontmatter":{"title":"자바스크립트의 스코프(Scope)","tags":["javascript"]}}}}