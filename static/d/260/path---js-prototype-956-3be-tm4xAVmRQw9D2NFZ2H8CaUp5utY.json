{"data":{"site":{"siteMetadata":{"title":"devLog","author":"Junho Baik"}},"markdownRemark":{"id":"/Users/junhobaik/Development/junhobaik.github.io/_posts/2017/2017-04-18-js-prototype.md absPath of file >>> MarkdownRemark","html":"<p>자바스크립트에서 모든 객체는 자신의 부모 객체와 연결 되어있다.<br>\n이것을 이용하여 객체지향에서 자식이 부모 객체의 요소를 가져다 쓸 수 있는 상속 개념을 사용할 수 있다.</p>\n<p>모든 객체는 자신을 생성한 생성자 함수의 prototype 프로퍼티가 가리키는 프로토타입 객체를 자신의 부모 객체로 설정하는 [[Prototype]] 프로퍼티로 연결한다. <code>[[Prototype]] Link</code></p>\n<p>생성된 객체의 실제 부모 역활을 하는 건 생성자 자신이 아닌 생성자의 prototype 프로퍼티가 가리키는 프로토타입 객체이다.</p>\n<h2>Prototype?</h2>\n<pre><code class=\"language-js\">function Person(name){\n    this.name = name;\n}\nvar foo = new Person('foo');\n</code></pre>\n<p>Person() 생성자는 prototype 프로퍼티로 자신과 링크된 프로토타입 객체(Person.prototype)를 가리킨다.  </p>\n<p>Person() 생성자로 생성된 객체 foo는,<br>\nPerson() 함수의 프로토타입 객체를 [[Prototype]]Link로 연결한다.  </p>\n<h3>프로토타입 체이닝</h3>\n<p>특정 객체의 프로퍼티나 메서드에 접근하려 할 때, 해당 객체에 접근하려고 하는 프로퍼티나 메서드가 없다면 [[Prototype]]Link를 따라 자신의 부모 방향으로 프로토타입 객체의 프로퍼티를 차례대로 검사하는 것을 말한다.<br>\n즉, 프로토타입 체이닝을 통해 자신이 아닌 부모의 프로토타입 객체 프로퍼티에도 접근이 가능.  </p>\n<p>객체 리터럴로 생성한 객체는 Object()라는 내장 생성자 함수로 생성된 것으로,<br>\nObject가 갖고 있는 prototype 프로퍼티가 가리키는 프로토타입 객체인 Object.prototype 객체를 자신의 프로토타입 객체로 연결한다.</p>\n<pre><code class=\"language-js\">//...위의 예제 코드...\nconsole.log(foo.hasOwnProperty('name'));\n</code></pre>\n<p>위의 예제 아래 이런 코드를 넣는다면 프로토타입 체이닝에 따라서 hasOwnProperty 메서드를 찾게 된다.<br>\n<code>foo > Person.prototype > Object.prototype.hasOwnProperty</code></p>\n<p>프로토타입 또한 자바스크립트 객체이다. 함수가 생성될 때 자신의 prototype 프로퍼티에 연결되는 프로토타입 객체는 기본적으로 constructor 프로퍼티만을 가진 객체이다.<br>\n따라서 일반 객체처럼 동적으로 프로퍼티를 추가/삭제하는 것이 가능하다. 또한 변경된 프로퍼티는 프로토타입 체이닝에 항시 반영된다.</p>\n<pre><code class=\"language-js\">function Person(name) {\n    this.name = name;\n}\n\nvar foo = new Person('foo');\n\nvar func = function() {console.log('hello');}\n\nPerson.prototype.sayHello = func;\nfoo.sayHello(); // Hello\n</code></pre>\n<hr>\n<p>Prototype을 이용한 간단한 Todo list 예제</p>\n<pre><code class=\"language-js\">var toDoObj = { //이것을 변경하면 변경사항이 항시 반영되어 나타난다.\n  show: function () {\n    var listLength = this.toDoList.length;\n    for (var i = 0; i &#x3C; listLength; i++) {\n      console.log('- ', this.toDoList[i]);\n    }\n  }\n  , add: function (task) {\n    this.toDoList.push(task);\n  }\n  , del: function (index) {\n    this.toDoList.splice(index, 1);\n  }\n}\n\nfunction toDo() {\n  this.toDoList = [];\n}\n\ntoDo.prototype = toDoObj; \n//todo 함수 객체의 프로토타입에 toDoObj를 추가해 \n//show,add,del을 프로퍼티를 사용할 수 있게 된다.\n//class toDo extends toDoObj {...}\n\nvar allTask = new toDo();\n//Object.setPrototypeOf(allTask,toDoObj);\n//toDo.prototype을 통해 todo() 생성자를 이용해 allTask라는 객체를 만들기 전에\n//todo.prototype = toDoObj를 하여 프로토타입을 추가하는 방법 대신에\n//object.setPrototypeOf를 사용하여 \n//allTask 객체에 toDoObj를 추가하는 방법 또한 있다.\n\nconsole.log(\"task 1~5 추가\");\nallTask.add(\"task 1\");\nallTask.add(\"task 2\");\nallTask.add(\"task 3\");\nallTask.add(\"task 4\");\nallTask.add(\"task 5\");\nallTask.show();\nconsole.log(\"\\n2,3 제거\");\nallTask.del(1);\nallTask.del(2);\nallTask.show();\n</code></pre>\n<hr>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://github.com/jsonko/dailyJavaScript/blob/171161c67ddcfb8dad369bb826e73cb5f4f93588/PrototypeChaining.md\">https://github.com/jsonko/dailyJavaScript/blob/171161c67ddcfb8dad369bb826e73cb5f4f93588/PrototypeChaining.md</a></li>\n<li><a href=\"https://github.com/KyusungDev/JSStudy/blob/5167fba10310d2b177aa26be43fb0d3b2b831f8b/docs/books/inside_javascript/02.md\">https://github.com/KyusungDev/JSStudy/blob/5167fba10310d2b177aa26be43fb0d3b2b831f8b/docs/books/inside_javascript/02.md</a></li>\n<li><a href=\"https://github.com/Lutece/sundayJavascript/blob/85d633268926261307ec18a3d4dad8c644e0c60f/inside_javascript/ch03/chapter03-04.md\">https://github.com/Lutece/sundayJavascript/blob/85d633268926261307ec18a3d4dad8c644e0c60f/inside_javascript/ch03/chapter03-04.md</a></li>\n</ul>","frontmatter":{"title":"자바스크립트 프로토타입(Prototype)","date":"April 18, 2017"}}},"pageContext":{"slug":"/js-prototype/","previous":null,"next":{"fields":{"slug":"/js-clouser/"},"frontmatter":{"title":"자바스크립트 클로저(Closure)","tags":["javascript"]}}}}