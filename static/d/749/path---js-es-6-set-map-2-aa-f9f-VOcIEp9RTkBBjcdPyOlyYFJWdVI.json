{"data":{"site":{"siteMetadata":{"title":"devLog","author":"Junho Baik"}},"markdownRemark":{"id":"/Users/junhobaik/Development/junhobaik.github.io/_posts/2017/2017-10-14-js-es6-set-map.md absPath of file >>> MarkdownRemark","html":"<h2>Set</h2>\n<p>중복없이 유일한 값을 저장하기 위한 타입, 이미 존재하는지 체크할때 유용하다</p>\n<pre><code class=\"language-javascript\">let mySet = new Set();\nconsole.log(toString.call(mySet)); // [object Set]\n\nfunction print(set){\n  set.forEach(function(value){\n    console.log(value); \n  });\n}\n\nmySet.add('a');\nmySet.add('b');\nmySet.add('a'); //저장 안됨\n\nprint(mySet); // \"a\" \"b\"\n\nconsole.log(mySet.has('b')); // true\n\nmySet.delete('a');\n\nprint(mySet); // \"b\"\n</code></pre>\n<h2>WeakSet</h2>\n<p>참조를 가지고 있는 객체만 저장이 가능하다.</p>\n<p>참조를 가지고 있던 객체가 참조를 잃게 되면 (null 이 되거나…) 가비지컬렉션의 대상이 된다.</p>\n<p>객체를 중복없이 저장하고 활용하려할때 유용하게 쓰일 수 있다.</p>\n<pre><code class=\"language-javascript\">let ws = new WeakSet();\nconsole.log(toString.call(ws)); // [object WeakSet]\n\nlet arr = [1,2,3,4,5];\nlet obj = { arr };\nlet number = 100;\nfunction foo(){}\n\n//ws.add(100);\nws.add(arr);\nws.add([1,2,3,4,5]);\nws.add(obj);\n//ws.add(100);\n//ws.add(number);\n//ws.add('string')\nws.add(foo);\nws.add(function a(){});\n// 위 주석처리는 모두 에러 발생한 것들\n// TypeError: Invalid value used in weak set\n\n\narr = null;\nconsole.log(ws.has(arr)); //false\n</code></pre>\n<h3>map / WeakMap</h3>\n<p>map과 set의 차이는 다루는 타입과, 구조가 다르다.</p>\n<p>map => object , key/value\nset => array</p>\n<p>이러한 차이점 이외에는 사용법은 거의 동일하다,\nWeak와 같은 경우에도 참조가 사라지면 가비지컬렉션의 대상이 되는 것도 동일하다.</p>\n<p>map을 활용하여 따로 부가적인 정보를 저장하는 key/value를 활용할 수 있는 것 정도의 차이점이 있다.</p>\n<h3></h3>\n<h4>WeakMap 활용</h4>\n<p>프라이빗한 변수 만들기.</p>\n<pre><code class=\"language-javascript\">const wm = new WeakMap();\n\nfunction MyInfo(name, age){\n  wm.set(this, {name, age});\n}\n\nMyInfo.prototype.getInfo = function(){\n  const {name, age} = wm.get(this);\n  return 'name:'+name+\"/age:\"+age;\n}\n\nlet myInfo = new MyInfo('baik', 27);\n\nconsole.log(myInfo.getInfo());\n//\"name:baik/age:27\"\n\nconsole.log(wm.has(myInfo)); //true\nmyInfo = null;\nconsole.log(wm.has(myInfo)); //false\n\n//myInfo를 통해서는 name, age 값을 뽑아낼 수 없다, (private)\n</code></pre>\n<hr>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://www.inflearn.com/course/es6-%ea%b0%95%ec%a2%8c-%ec%9e%90%eb%b0%94%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8/\">모던 자바스크립트(javascript) 개발을 위한 ES6 강좌</a></li>\n</ul>","frontmatter":{"title":"자바스크립트 ES6 Set, WeakSet / Map, WeakMap","date":"October 14, 2017"}}},"pageContext":{"slug":"/js-es6-set-map/","previous":{"fields":{"slug":"/js-variable-types/"},"frontmatter":{"title":"자바스크립트의 타입들","tags":["javascript"]}},"next":{"fields":{"slug":"/js-number-type/"},"frontmatter":{"title":"자바스크립트의 숫자 타입(Number Type)","tags":["javascript"]}}}}