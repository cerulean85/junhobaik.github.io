{"data":{"site":{"siteMetadata":{"title":"devLog","author":"Junho Baik"}},"markdownRemark":{"id":"/Users/junhobaik/Development/junhobaik.github.io/_posts/2017/2017-07-21-js-es6-arrow-function.md absPath of file >>> MarkdownRemark","html":"<p>ES6 에 출현한 새로운 형태의 함수 표현 방법</p>\n<pre><code class=\"language-javascript\">const fn = function(){};\nconst arrowFn = () => {};\n\n(v) => (v+1) //{}없이 사용, v+1이 리턴값\n(v) => v+1 //()생략 가능\n</code></pre>\n<h3>Arrow Function, this context</h3>\n<pre><code class=\"language-javascript\">const obj = {\n  runTimeout() {\n    setTimeout(function(){\n      console.log(toString.call(this)); //[object Window]\n    }, 1000);\n  },\n  \n  sayHi(){\n    console.log(\"hi\");\n    console.log(toString.call(this));\n  }\n}\n\nobj.runTimeout(); //[object Window]\nobj.sayHi(); // hi [object Object]\n</code></pre>\n<p>위의 코드는 아무런 문제 없이 작동하는 코드이다, runTimeout은 settimeout때문에 이벤트큐에 등록 된뒤 실행되는 것이라 this가 해당 오브젝트가 아닌 윈도우이다. 우선 위에서 this가 가리키는 것이 무엇인지 잘 봐두고, 문제가 될 수 있는 상황을 아래서 살펴보자</p>\n<pre><code class=\"language-javascript\">const obj = {\n  runTimeout() {\n    setTimeout(function(){\n      console.log(toString.call(this));\n      this.sayHi(); //&#x3C;========\n      //typeError: this.sayHi is not a function\n    }, 1000);\n  },\n  \n  sayHi(){\n    console.log(\"hi\");\n    console.log(toString.call(this));\n  }\n}\n\nobj.runTimeout();\n</code></pre>\n<p>runTimeout 에서 sayHi를 실행하려면 this가 가리키는 것이 서로 다르기 때문에 오류가 난다.</p>\n<pre><code class=\"language-javascript\">const obj = {\n  runTimeout() {\n    setTimeout(function(){\n      console.log(toString.call(this)); //[obejct Object]\n      this.sayHi();\n    }.bind(this), 1000); //&#x3C;========\n  },\n  \n  sayHi(){\n    console.log(\"hi\");\n    console.log(toString.call(this)); //[obejct Object]\n  }\n}\n\nobj.runTimeout(); // [obejct Object] hi [obejct Object]\n</code></pre>\n<p>위와 같이 .bind(this) 를 사용하여 해결하는 방법이 있다.</p>\n<pre><code class=\"language-javascript\">const obj = {\n  runTimeout() {\n    setTimeout(()=>{ //&#x3C;========\n      console.log(toString.call(this));\n      this.sayHi();\n    }, 1000);\n  },\n  \n  sayHi(){\n    console.log(\"hi\");\n    console.log(toString.call(this));\n  }\n}\n\nobj.runTimeout();\n</code></pre>\n<p>또 다른 방법으로 Arrow function을 이용하여 해결할 수 있다.</p>\n<p>Arrow function은 항상 this context를 실행되는 해당 context를 유지하는 특성이 있다.</p>\n<hr>\n<h2>reference</h2>\n<ul>\n<li><a href=\"https://www.inflearn.com/course/es6-%ea%b0%95%ec%a2%8c-%ec%9e%90%eb%b0%94%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8/\">모던 자바스크립트(javascript) 개발을 위한 ES6 강좌</a></li>\n</ul>","frontmatter":{"title":"자바스크립트 ES6 Arrow Function","date":"July 21, 2017"}}},"pageContext":{"slug":"/js-es6-arrow-function/","previous":{"fields":{"slug":"/js-es6-from/"},"frontmatter":{"title":"자바스크립트 ES6 from","tags":["javascript","ES6"]}},"next":{"fields":{"slug":"/js-es6-object-assign/"},"frontmatter":{"title":"자바스크립트 ES6 Object.assign","tags":["javascript","ES6"]}}}}