{"data":{"site":{"siteMetadata":{"title":"devLog","author":"Junho Baik"}},"markdownRemark":{"id":"/Users/junhobaik/Development/junhobaik.github.io/_posts/2018-05-02-js-script-position.md absPath of file >>> MarkdownRemark","html":"<p>처음 html, javascript를 공부 할 때는 script 태그는 head 태그에 위치하게끔 하는 코드나,<br>\n또는 body 태그의 어디에 위치하건 그 위치에 대해 별 의미를 두지 않는 코드들이 많았다.</p>\n<p>하지만 지금은 항상 스크립트는 body태그의 최하단에 넣는 것이 습관화되었고 그 이유도 알고 있다.<br>\n그런데 이제와서 이 글을 쓰는 이유는 <strong>script 태그의 async / defer</strong>를 공부하게 되면서 새로 정리해보고자 쓰게 되었다.</p>\n<h2>브라우저의 동작과 script 위치의 2가지 이유</h2>\n<p>HTML에서 script 태그가 body 태그 안의 최하단에 위치해야 하는 이유는 브라우저의 동작 방식과 연관이 있다.</p>\n<ol>\n<li>HTML을 읽기 시작한다.</li>\n<li>HTML을 파싱한다 (parsing: 컴퓨터가 읽을 수 있는 코드로 바꾸는 작업)</li>\n<li>DOM 트리 생성.</li>\n<li>Render 트리가 생성 (DOM tree + CSS의 CSSOM 트리 결합)</li>\n<li>Display(브라우저)에 표시된다.</li>\n</ol>\n<p>여기서 중요하게 봐야할 구간은 1~2의 과정이다.</p>\n<p>HTML을 읽어 내려가는 과정에서 script 요소를 만나면 파싱을 중단,<br>\n중단 된 상태에서 자바스크립트 코드(파일)을 로드 후 자바스크립트 코드를 파싱한다.<br>\n그리고 다시 HTML 파싱이 계속된다.</p>\n<p>결론적으로 HTML을 읽는 과정에서 자바스크립트 로드와 파싱을 위해서 중단되는 시점이 생기고,\n그에 따라 그 만큼 Display에 표시되는 것이 지연된다.</p>\n<p><strong>위의 경우가 body태그 최하단에 위치해야 하는 이유 1번째이다.</strong></p>\n<p>2번째 이유는, <strong>HTML 파싱이 끝나고 DOM 트리가 생기기 전 자바스크립트가 DOM 조작을 할 경우 에러 발생</strong>이 할 수 있다는 것이다.</p>\n<pre><code class=\"language-javascript\">const appEl = document.querySelector(.app);\n</code></pre>\n<p>우리는 위와 같이 DOM에 관한 조작을 무수히 할 것인데 DOM 트리가 렌더링 되기 전이라면 <code>appEl</code>은 <code>undefined</code>이다. 이러한 오류점이 발생한 이유를 모르거나, 디버깅을 못한다면 이를 해결하는데 꽤나 애먹을 것이다.</p>\n<p>이렇게 body 태그 최하단에 위치해야하는 이유를 알아봤고 다음으로는 이러한 이유를 방지하기 위해서 사용하는 <strong>script 태그의 async / defer 속성</strong>을 알아보자.</p>\n<h2>script 태그의 async / defer 속성</h2>\n<p>기본적으로 script 태그는 위에서 작성한 브라우저의 동작 방식대로 불러진다.<br>\n하지만 async / defer 속성을 사용함으로 다르게 script 태그를 불러올 수 있게 된다.</p>\n<pre><code class=\"language-html\">&#x3C;script async src=\"index.js\">&#x3C;/script>\n&#x3C;script defer src=\"index.js\">&#x3C;/script>\n</code></pre>\n<p>async / defer 속성을 사용하면 <strong>HTML 파싱과 동시에 스크립트 로드</strong>가 이루어진다.</p>\n<p>그 후에,<br>\n<strong>async</strong>의 경우에는 <strong>스크립트 로드가 완료되는 즉시 스크립트가 실행</strong>된다.<br>\n<strong>defer</strong>의 경우에는 <strong>HTML 파싱이 모두 끝난 뒤 스크립트가 실행</strong>된다</p>\n<p>결론적으로,  </p>\n<p><strong>async / defer</strong>를 사용함으로 HTML 파싱과 스크립트 로드가 동시에 진행되므로 <strong>HTML 파싱이 완료되는 시간을 줄일 수 있다</strong>  </p>\n<p><strong>async</strong>는 파싱 완료 전에 스크립트 로드 후 실행이 되므로 위에서 body태그 최하단에 script 태그가 위치해야하는 2번째 이유에 적합하지 않다.  </p>\n<p><strong>defer</strong>는 파싱이 완료 된 후 스크립트가 실행되므로 2가지 이유 전부에 적합하다.</p>\n<hr>\n<h2>References</h2>\n<ul>\n<li><a href=\"http://poiemaweb.com/js-syntax-basics\">PoiemaWeb</a></li>\n</ul>","frontmatter":{"title":"HTML에서 script태그는 어디에 위치해야 할까?","date":"Invalid date"}}},"pageContext":{"slug":"/js-script-position/","previous":{"fields":{"slug":"/jekyll-apply-theme-simple/"},"frontmatter":{"title":"Jekyll 블로그 테마 '쉽게' 적용하기 (minimal-mistakes)","tags":["blog","jekyll"]}},"next":{"fields":{"slug":"/colors-module/"},"frontmatter":{"title":"콘솔에 색상을 입혀주는 'Colors' 모듈 사용해보기","tags":[]}}}}