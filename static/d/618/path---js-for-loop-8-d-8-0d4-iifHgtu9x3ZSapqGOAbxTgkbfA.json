{"data":{"site":{"siteMetadata":{"title":"devLog","author":"Junho Baik"}},"markdownRemark":{"id":"/Users/junhobaik/Development/junhobaik.github.io/_posts/2017/2017-06-29-js-for-loop.md absPath of file >>> MarkdownRemark","html":"<h2>Javascript 'For Loop'</h2>\n<p>자바스크립트에서 사용하는 for 반복문의 유형에 대해 알아보자.</p>\n<ul>\n<li>\n<p>for</p>\n<ul>\n<li><code>for ([initialization]; [condition]; [final-expression])</code></li>\n</ul>\n</li>\n<li>\n<p>for in</p>\n<ul>\n<li><code>for (variable in [object | array])</code></li>\n</ul>\n</li>\n<li>\n<p>for of (ES6)</p>\n<ul>\n<li><code>for (variable of object)</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3>- for</h3>\n<p><code>for ([initialization]; [condition]; [final-expression])</code></p>\n<h3>- for in</h3>\n<p><code>for (variable in [object | array])</code></p>\n<ul>\n<li>variable</li>\n<li>object 일때 variable = object의 다음 속성 이름</li>\n<li>array 일때 variable = array의 다음 요소 인덱스</li>\n</ul>\n<h3>- for of (ES6)</h3>\n<p><code>for (variable of object)</code></p>\n<ul>\n<li>variable</li>\n<li>object의 임의 속성 <strong>값</strong>일 수 있는 변수입니다.</li>\n</ul>\n<pre><code class=\"language-javascript\">const arr = [1,\"\",undefined,NaN,null];\n\n/**************************************/\n\nfor(let index = 0; index &#x3C; arr.length; index++){\n  console.log(arr[index]);\n}\n// 1\n// \"\"\n// undefined\n// NaN\n// null\n\n\n/**************************************/\n\n\nfor(let index in arr){\n  console.log(\"index:\" + index + \" / arr[index]:\" + arr[index]);\n}\n// index:0 / arr[index]:1\n// index:1 / arr[index]:\"\"\n// index:2 / arr[index]:undefined\n// index:3 / arr[index]:NaN\n// index:4 / arr[index]:null\n\n\n/**************************************/\n\n\nfor(let value of arr){\n  console.log(value);\n}\n// 1\n// \"\"\n// undefined\n// NaN\n// null\n</code></pre>\n<h3>for of / for in 의 차이점</h3>\n<p>배열일 경우 배열 전체를 순회하는 반복문인 것은 같지만 차이점이 있다.</p>\n<p>여기서 ES6에서 새로 나온 for of 의 장점을 발견 할 수 있다.</p>\n<p>아래 코드를 살펴보면 Array의 prototype에 foo라는 새로운 메소드를 정의해놓았다.\n그런데 arr를 for in문을 통해서 콘솔 출력한 결과 foo라는 메소드까지 같이 출력되는 것을 볼 수 있다.\n하지만 for of는 그렇지 않다, 온전히 자신의 것만 출력할 수 있다.</p>\n<pre><code class=\"language-javascript\">const arr = [1,\"\",undefined,NaN,null];\nArray.prototype.foo = function(){};\n\nfor(let index in arr){\n  console.log(\"index:\" + index + \" / arr[index]:\" + arr[index]);\n}\n// index:0 / arr[index]:1\n// index:1 / arr[index]:\"\"\n// index:2 / arr[index]:undefined\n// index:3 / arr[index]:NaN\n// index:4 / arr[index]:null\n// index:foo / arr[index]:function () {}\n\nfor(let value of arr){\n  console.log(value);\n}\n// 1\n// \"\"\n// undefined\n// NaN\n// null\n</code></pre>","frontmatter":{"title":"자바스크립트 for문들의 유형과 차이점","date":"June 29, 2017"}}},"pageContext":{"slug":"/js-for-loop/","previous":{"fields":{"slug":"/js-es6-const-let/"},"frontmatter":{"title":"자바스크립트 ES6 const, let","tags":["javascript","ES6"]}},"next":{"fields":{"slug":"/js-es6-string-methods/"},"frontmatter":{"title":"자바스크립트 ES6 String Methods","tags":["javascript","ES6"]}}}}