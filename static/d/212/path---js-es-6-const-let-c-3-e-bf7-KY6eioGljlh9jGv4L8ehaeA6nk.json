{"data":{"site":{"siteMetadata":{"title":"devLog","author":"Junho Baik"}},"markdownRemark":{"id":"/Users/junhobaik/Development/junhobaik.github.io/_posts/2017/2017-06-28-js-es6-const-let.md absPath of file >>> MarkdownRemark","html":"<p>ES6 (ES2015) 에서는 새로운 선언 방법이 생겼는데,<br>\n그것이 const와 let이다.<br>\n기존에 다른 프로그래밍 언어를 사용하고 왔다면 처음 var 를 접할때 당황스러운 점을 느껴본 적이 있을 것이다. var의 관대함 때문이다. 그런 것을 비교하며 살펴보겠다.</p>\n<pre><code class=\"language-javascript\">//case 1\nconsole.log(a);\nvar a;\n\n//case 2\nconsole.log(a);\nlet a;\n\n//case 3\nconsole.log(a);\nconst a;\n</code></pre>\n<p>해당 변수를 선언하기 전에 호출하는 모습이다.</p>\n<ul>\n<li>case 1 : <code>undefined</code></li>\n<li>case 2 &#x26; 3 : <code>error</code></li>\n</ul>\n<pre><code class=\"language-javascript\">//case 1\nvar a = 'a';\nvar a = 'A';\n\n//case 2\nlet b = 'b';\nlet b = 'B';\n\n//case 3\nconst c = 'c';\nconst c = 'C';\n</code></pre>\n<p>위의 세 경우를 보자 같은 이름의 변수를 다시금 선언하고 있는 모습이다.</p>\n<ul>\n<li>case 1 : <code>a=1</code></li>\n<li>case 2 &#x26; 3 : <code>error</code></li>\n</ul>\n<p><strong>위의 두가지 경우를 통해서 let, const는 기존의 var의 관대함 없이 엄격해진 것을 볼 수 있다</strong></p>\n<h3>scope</h3>\n<p>다음으로 스코프, 즉 유효 범위에 따른 차이점이다.</p>\n<pre><code class=\"language-javascript\">//case 1\nvar a = 'a';\nfunction print(){\n  var a = 'A';\n  console.log(a);\n}\nprint(); // 'A'\nconsole.log(a); // 'A'\n\n//case 2\nlet a = 'a';\nfunction print(){\n  let a = 'A';\n  console.log(a);\n}\nprint(); // 'A'\nconsole.log(a); // 'a'\n</code></pre>\n<ul>\n<li>\n<p>case 1</p>\n<ul>\n<li>함수 밖에서 a 선언, 그리고 함수 안에서 재선언되었다.</li>\n<li>함수 안 a 출력은 함수 안에서 선언한 'A'가 출력</li>\n<li>함수 밖 a 출력은 함수 안에서 재선언한 'A'가 출력</li>\n<li>즉, 동일한 유효범위 안에 있다.</li>\n</ul>\n</li>\n<li>\n<p>case 2</p>\n<ul>\n<li>함수 밖에서 a 선언, 그리고 함수 안에서 선언.</li>\n<li>함수 안 a 출력은 함수 안에서 선언한 'A'가 출력</li>\n<li>함수 밖 a 출력은 함수 밖에서 선언한 'a'가 출력</li>\n<li>즉, 서로 다른 유효범위를 가지고 있다.</li>\n<li>let, const는 블록 유효범위(Block scope)를 가지고 있어,\n해당 블록 범위 안에서만 유효하다.</li>\n</ul>\n</li>\n</ul>\n<h3>let, const 의 차이점</h3>\n<p>var 와 let, const의 차이점을 알아보았고, 그렇다면 let, const의 차이점은 무엇일까?</p>\n<ul>\n<li>\n<p>const </p>\n<ul>\n<li>상수</li>\n<li>초기값 필요 / 값 재할당 불가</li>\n<li>Array, Object, function의 경우 멤버값 조작 가능</li>\n</ul>\n</li>\n<li>\n<p>let</p>\n<ul>\n<li>초기값 불필요 / 값 재할당 가능</li>\n</ul>\n</li>\n</ul>\n<h3>let, const 의 사용</h3>\n<p>그렇다면 언제 let을 사용하고 const를 사용해야 할까?</p>\n<ul>\n<li>\n<p>const</p>\n<ul>\n<li>값이 수정되지 않는 상수값 선언시 사용</li>\n<li>array, object, function 활용시 사용</li>\n</ul>\n</li>\n<li>\n<p>let</p>\n<ul>\n<li>값을 재할당할 필요가 있는 변수에 사용</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3>etc.</h3>\n<h4>immutable array 만들기 (불변의 어레이 만들기)</h4>\n<pre><code class=\"language-javascript\">const list = [1,2,3];\n\nconst list2 = list;\nlist2.push(4);\n\n// 원하는 결과\n// list = [1,2,3]\n// list2 = [1,2,3,4]\n// 'list === list2' 가 false\n\nconsole.log('1, '+list);\nconsole.log('2, '+list2);\nconsole.log(list === list2);\n\n// 실제 결과\n// list = [1,2,3,4]\n// list2 = [1,2,3,4]\n// 'list === list2' 가 true\n\n// 원하는 결과를 얻기 위한 방법\nconst newlist = [1,2,3]\nconst newlist2 = [].concat(newlist);\nnewlist2.push(4);\n\nconsole.log('1, '+newlist);\nconsole.log('2, '+newlist2);\nconsole.log(newlist === newlist2);\n\n// newlist = [1,2,3]\n// newlist2 = [1,2,3,4]\n// 'newlist === newlist2' false\n</code></pre>\n<hr>\n<h2>References</h2>\n<ul>\n<li><a href=\"http://blog.nekoromancer.kr/2016/01/26/es6-var-let-%EA%B7%B8%EB%A6%AC%EA%B3%A0-const/\">http://blog.nekoromancer.kr/2016/01/26/es6-var-let-%EA%B7%B8%EB%A6%AC%EA%B3%A0-const/</a></li>\n</ul>","frontmatter":{"title":"자바스크립트 ES6 const, let","date":"June 28, 2017"}}},"pageContext":{"slug":"/js-es6-const-let/","previous":{"fields":{"slug":"/js-react-lifecycle/"},"frontmatter":{"title":"리액트 생명주기 (React LifeCycle)","tags":["javascript","react"]}},"next":{"fields":{"slug":"/js-es6-string-methods/"},"frontmatter":{"title":"자바스크립트 ES6 String Methods","tags":["javascript","ES6"]}}}}