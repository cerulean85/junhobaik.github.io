{"data":{"site":{"siteMetadata":{"title":"devLog","author":"Junho Baik"}},"markdownRemark":{"id":"/Users/junhobaik/Development/junhobaik.github.io/_posts/2017/2017-09-11-js-array.md absPath of file >>> MarkdownRemark","html":"<p>자바스크립트의 배열은 어떤 타입이던 담을 수 있고, 배열 크기도 미리 정하지 않는다.</p>\n<pre><code class=\"language-javascript\">var arr = [\n  null,\n  undefined,\n  true,\n  1,\n  \"array\",\n  {}\n];\n\nconsole.log(arr); \n// [null, undefined, true, 1, \"array\", [object Object]{...}]\n\nconsole.log(typeof arr, toString.call(arr));\n//'object', '[object Array]'\n</code></pre>\n<h3>배열에서 빈 슬롯의 주의점</h3>\n<p>배열에서 주의 해야할 점은 중간에 빈 구멍이 있는 배열을 조심해야 한다.</p>\n<pre><code class=\"language-javascript\">var arr = [];\narr[0] = 1;\narr[2] = 2;\narr[3] = undefined;\n</code></pre>\n<p>위와 같은 코드가 있을때 배열의 1번은 비어있을 것이다. 어떤 배열이 되어있을지 보면</p>\n<pre><code class=\"language-javascript\">console.log(arr); //[1, undefined, 2, undefined]\nconsole.log(arr.length); // 4\n</code></pre>\n<p>위와 같이 되어있다. 비어있는 배열이 undefined가 되어있다.\n1번 undefined와 따로 선언한 undefined의 3번은 서로 같은 것인 것일까?</p>\n<pre><code class=\"language-javascript\">console.log(arr[1] === arr[3])\nconsole.log(typeof arr[1] === typeof arr[3]);\nconsole.log(toString.call(arr[1]) === toString.call(arr[3]));\nconsole.log(arr[1] === undefined);\nconsole.log(arr[3] === undefined);\n</code></pre>\n<p>이렇게 비교를 해 보아도 모두가 <strong>true</strong> 로 일치한다고 나온다 하지만\n빈 슬롯이 undefined과 된 것과 선언으로 인해 undefined 인 것은 <strong>엄연히 다르다.</strong></p>\n<p>그 이유는 아래에서 알 수 있다.</p>\n<pre><code class=\"language-javascript\">console.log(arr);\n[1, undefined, 2, undefined]\n\nfor(index in arr){\n  console.log(index);\n}\n// 0, 2, 3\n\nvar newArr = [];\narr.forEach(function(value, index){\n  console.log(\"index:\"+index+\"/value:\"+value);\n  newArr.push(value);\n})\n// \"index:0/value:1\"\n// \"index:2/value:2\"\n// \"index:3/value:undefined\"\n\nconsole.log(newArr);\n// [1, 2, undefined]\n</code></pre>\n<p>for in, forEach 등을 통해 실험을 해 본 결과이다.\nfor in 에서는 index 1이 존재하지 않는 것으로 보이고,\nforEach를 통해서도 새로운 배열을 복사하는 것을 하려 했으나 1번 배열이 빠진채로 수행 된 것을 볼 수 있다.</p>\n<p>이러한 예제를 통해 빈 슬롯이 있는 배열을 다루게 된다면 조심해야한다는 것을 알 수 있다.</p>\n<h3>배열의 key/property 형태의 활용</h3>\n<p>배열 인덱스는 숫자이다. 그런데 배열도 객체이기 때문에 key/property 문자열을 추가 할 수 있다.</p>\n<pre><code class=\"language-javascript\">var arr = [];\n\narr[0] = 1;\narr[\"two\"] = 2;\n</code></pre>\n<p>조심해야할 점은 이렇게 선언할 경우 배열의 길이는 늘어나지 않는 것을 조심해야한다. 또한 배열을 출력할 경우 나타나지 않는다.</p>\n<pre><code class=\"language-javascript\">console.log(arr); // [1]\nconsole.log(arr[\"two\"]); // 2\n\nconsole.log(arr.length); // 1\n\nfor(index in arr){\n  console.log(index);\n} // '0'\n</code></pre>\n<p>더욱 조심해야 할 점은 키로 넣은 문자열이 표준 10진수 숫자로 이루어져 있다면 아래와 같은 결과를 얻게 된다.</p>\n<pre><code class=\"language-javascript\">arr[\"5\"] = \"five\";\nconsole.log(arr);\n//[1, undefined, undefined, undefined, undefined, \"five\"]\nconsole.log(arr.length); // 6\n\nfor(index in arr){\n  console.log(index);\n} // '0', '5', 'two'\n</code></pre>\n<p>키/프로퍼티 형태로 활용하는 것을 지양하고 이렇게 써야한다는 상황이라면 문자열 프로퍼티는 꼭 숫자가 아닌 글자만 사용하도록 하자.</p>\n<h3>유사배열</h3>\n<p>유사배열을 진짜 배열로 바꾸는 방법</p>\n<p>일반적으로 indexOf, concat, forEach 등의 배열 함수들을 사용한다,\n또한 slice를 활용한 방법도 있다</p>\n<pre><code class=\"language-javascript\">function test(){\n  var arr = Array.prototype.slice.call( arguments );\n  return arr;\n}\n\nvar a = test('a', 1);\nconsole.log(toString.call(a), a); \n//\"[object Array]\" [\"a\", 1]\n</code></pre>\n<p>ES6에 와서는 유사 배열을 진짜 배열로 바꾸는 기능이 추가되었다.\n<code>Array.from()</code></p>\n<pre><code class=\"language-javascript\">function test(){\n  var arr = Array.from( arguments );\n  return arr;\n}\n\nvar a = test('a', 1);\nconsole.log(toString.call(a), a); \n//\"[object Array]\" [\"a\", 1]\n</code></pre>","frontmatter":{"title":"자바스크립트의 배열(Array)","date":"September 11, 2017"}}},"pageContext":{"slug":"/js-array/","previous":{"fields":{"slug":"/js-es6-proxy/"},"frontmatter":{"title":"자바스크립트 ES6 프록시(Proxy)","tags":["javascript","ES6"]}},"next":{"fields":{"slug":"/js-variable-types/"},"frontmatter":{"title":"자바스크립트의 타입들","tags":["javascript"]}}}}