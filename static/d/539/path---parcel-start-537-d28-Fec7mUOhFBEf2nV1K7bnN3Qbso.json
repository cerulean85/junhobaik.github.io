{"data":{"site":{"siteMetadata":{"title":"devLog","author":"Junho Baik"}},"markdownRemark":{"id":"/Users/junhobaik/Development/junhobaik.github.io/_posts/2018-03-23-parcel-start.md absPath of file >>> MarkdownRemark","html":"<p>주로 CRA(create-react-app)을 이용한 리액트 개발을 주로 해왔고 그로 인해 웹팩(Webpack) 번들러를 통해 간단한 설정 변경 등을 해왔는데 이번에 새로운 번들러인 파셀(Parcel)을 알게되었다.</p>\n<p>공식 홈페이지의 헤드라인부터 <strong>불꽃 튀게 빠르고 설정이 필요 없는 웹 애플리케이션 번들러</strong>이다.<br>\n사용해보고나니 비교적 무거운 웹팩보다는 빠르다는게 느껴졌고 복잡했던 설정법보다는 쉽게 설정이 가능한 번들러였다. minify, hot module replacement와 같이 기본적으로 필요한 기능은 거의 포함되어있고 가벼우니 개인 소규모 프로젝트에는 좋을 것 같다는 생각이 들었다.</p>\n<h2>Parcel 시작하기</h2>\n<p><a href=\"https://parceljs.org/\">공식 홈페이지</a></p>\n<p>일단 파셀을 사용하기 위해 글로벌 설치해보자</p>\n<pre><code class=\"language-shell\">$ npm install -g parcel-bundler\n</code></pre>\n<p>다음으로 우선 git과 npm을 init하자</p>\n<pre><code class=\"language-shell\">$ git init\n$ npm init\n</code></pre>\n<p><code>index.html</code>, <code>index.js</code> 파일을 준비하고</p>\n<pre><code class=\"language-html\">&#x3C;!-- index.html -->\n&#x3C;body>\n  &#x3C;div id=\"root\">&#x3C;/div>\n  &#x3C;script src=\"./index.js\">&#x3C;/script>\n&#x3C;/body>\n</code></pre>\n<p>위와 같이 js파일을 연결해준다.<br>\ndiv#root는 후에 React를 사용하기 위한 것이다.</p>\n<p>그리고 파셀 명령어로 개발 서버를 켜주면 파셀을 사용할 준비가 된 것이다.</p>\n<pre><code class=\"language-shell\">$ parcel index.html\n\nServer running at http://localhost:1234\nBuilt in 9ms.\n</code></pre>\n<p>NPM Script에도 추가해두면 편리하게 사용이 가능하다.</p>\n<pre><code class=\"language-json\">// package.json\n  \"scripts\": {\n    \"start\": \"parcel index.html\"\n  }\n</code></pre>\n<h2>React 사용하기</h2>\n<p>React 사용은 Parcel이라고 다르지 않으므로 간단히 다루겠다.</p>\n<pre><code>$ npm install --save react react-dom\n</code></pre>\n<p>이제 리액트 컴포넌트와 css파일을 만들고 index.js를 수정해보자</p>\n<p><code>./src/App.js</code></p>\n<pre><code class=\"language-javascript\">import React from 'react';\nimport './style.css';\n\nclass App extends React.Component {\n  render(){\n    return(\n      &#x3C;div id=\"App\">\n        Hello World\n      &#x3C;/div>\n    )\n  }\n}\n\nexport default App;\n</code></pre>\n<p><code>./src/style.css</code></p>\n<pre><code class=\"language-css\">body {\n  color: red;\n}\n</code></pre>\n<p><code>./index.js</code></p>\n<pre><code class=\"language-javascript\">import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './src/App.js';\n\nReactDOM.render(&#x3C;App />, document.getElementById('root'));\n</code></pre>\n<p>여기까지 리액트를 사용하기 위한 되었다.<br>\n허나 아직은 에러와 함께 작동하지 않을 것인데, 여기서 Babel이 필요하다.</p>\n<h2>Babel 사용하기</h2>\n<p>Babel env, react preset을 설치한다.</p>\n<pre><code class=\"language-shell\">$ npm install --save-dev babel-preset-env babel-preset-react\n</code></pre>\n<p><code>./.babelrc</code> 파일을 생성, 설정을 등록한다.</p>\n<pre><code class=\"language-json\">{\n  \"presets\": [\"env\", \"react\"]\n}\n</code></pre>\n<p>여기까지 했다면 작성했던 코드가 정상적으로 출력되는 것을 볼 수 있다.</p>\n<h2>SASS(SCSS) 사용하기</h2>\n<p>정상적인 설치 방법은 우선 node-sass 모듈을 설치하는 과정을 거쳐야 하나 parcel을 사용하면 더 간편하게 사용할 수 있다.</p>\n<p>현재 css 파일을 scss 확장자로 바꾸고\ncss 파일을 import 했던 부분을 scss로 바꿔주면</p>\n<p>Parcel이 자동으로 node-sass를 설치하며 적용된다.</p>\n<h2>Build</h2>\n<p><a href=\"https://parceljs.org/production.html\">공식 문서 - production</a></p>\n<p>바로 npm script를 추가해 빌드를 해보자</p>\n<pre><code class=\"language-json\">\"build\": \"parcel build index.html -d build --public-url ./\"\n</code></pre>\n<p><code>-d build</code>는 <code>./build</code>폴더에 빌드한다는 뜻이며,  </p>\n<p>여기서 하나 알아두면 좋은 것은 <code>--public-url ./</code> 부분이다.<br>\n<code>--public-url ./</code> 옵션을 주게 되면 빌드 후 아래와 같은 결과가 나온다.</p>\n<pre><code class=\"language-html\">&#x3C;link rel=\"stylesheet\" type=\"text/css\" href=\"1a2b3c4d.css\">\nor\n&#x3C;script src=\"e5f6g7h8.js\">&#x3C;/script>\n</code></pre>\n<p>Github Page와 같은 정적 페이지 서비스를 사용할 경우에는 아래와 같이 할 수 있다.</p>\n<pre><code class=\"language-shell\">$ parcel build index.html -d build --public-url https://username.github.io\n</code></pre>\n<p>그러면 결과가 아래와 같이 된다.</p>\n<pre><code class=\"language-html\">&#x3C;link rel=\"stylesheet\" type=\"text/css\" href=\"https://username.github.io/1a2b3c4d.css\">\nor\n&#x3C;script src=\"https://username.github.io/e5f6g7h8.js\">&#x3C;/script>\n</code></pre>\n<p>이렇게 빌드를 하고나면 minify된 빌드 결과물을 얻을 수 있다.</p>\n<hr>\n<p>여기까지 정말 간단하게만 Parcel로 작은 리액트 프로젝트를 사용하기 위한 준비를 해보았다. </p>\n<p>CRA(Create-react-app)과 프로젝트를 시작하는 단계에서 비교해보면 babel 설정과 같은 부분은 Parcel이 설정해줘야하는 것이 하나 더 있다는 점이 있지만 SASS 사용 등 복잡한 Webpack config를 뒤지고 수정하는 면에서는 Parcel이 더 간편하게 사용할 수 있는 것 같다.  </p>\n<hr>\n<ul>\n<li>\n<p>References</p>\n<ul>\n<li><a href=\"https://parceljs.org/getting_started.html\">Parcel documents</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"웹팩 대신 파셀(Parcel) 사용해보기 \\[with React, Babel, SASS\\]","date":"Invalid date"}}},"pageContext":{"slug":"/parcel-start/","previous":{"fields":{"slug":"/vuejs-install/"},"frontmatter":{"title":"Vue.JS 및 Vue 개발 도구 설치하기","tags":["vue","javascript"]}},"next":{"fields":{"slug":"/netflix-autoskip/"},"frontmatter":{"title":"넷플릭스 정주행을 위한 인트로 자동 스킵 크롬 확장 프로그램 (Netflix AutoSkip)","tags":[]}}}}